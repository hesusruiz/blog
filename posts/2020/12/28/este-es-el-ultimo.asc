---
category: ''
date: 2020-12-28 18:54:26 UTC+01:00
description: ''
link: ''
slug: strong-transaction-finality
tags: ''
title: 'Strong Transaction Finality: Beyond 1/3rd byzantine nodes in BFT'
type: text
previewimage: /images/public-permissioned-titulo.png
---

= Strong Transaction Finality: beyond 1/3rd byzantine nodes in BFT 
// :title-separator: ;
// Metadata:
:author: Jesus Ruiz
:email: hesus.ruiz@gmail.com
:revnumber: 0.1 
:revdate: 13-02-2020
// Settings:
:icons: font
:reproducible:
:sectnums:
:imagesdir: ../images
:xrefstyle: short
:stem:
:pdf-theme: jesus-theme.yml
// :toc:
// Refs:

ifdef::backend-pdf[]
{author} - {email} - Version {revnumber}, {revdate}
endif::backend-pdf[]


We analyze the robustness property of blockchain networks using BFT algorithms under some conditions.
Specifically, the transaction finality when the network is compromised with more than 1/3rd of the consensus nodes byzantine. The especific consensus algorithm analyzed is IBFT 2.0.

++++
<!-- TEASER_END -->
++++


:numbered:

== Introduction

A DLT/blockchain is an append-only, sequential, linked, data structure replicated over a peer-to-peer network, where transactions are stored and grouped to form new blocks.
Participants of the network (peers) achieve *distributed consensus* on the validity of and the ordering of transactions.

Consensus is a set of rules and procedures that allow a blockchain system to maintain and update the distributed ledger and to ensure the trustworthiness of the records in the ledger. This trustworthiness – often referred to as safety – is the systems ́ reliability, authenticity, and accuracy. Consensus mechanisms are implementations by which consensus is achieved in blockchain systems. There are many alternative consensus mechanisms in use in different blockchain systems. Examples of consensus mechanisms include Proof-of-Work, Proof-of-Stake, Delegated Proof-of-Stake, Paxos, Practical Byzantine Fault Tolerance, Proof-of-Authority, Proof-of-Burn, Proof-of-Capacity, and Proof-of-ownership.

For a Public-Permissioned network (xref:publicpermissioned.adoc[see the definition here]), the permissioning of nodes allows for the usage of consensus algorithms other than PoW or PoS, taking advantage of the well-known identities of the nodes executing the consensus algorithm.
As mentioned above, the consensus algorithm is a very important component of a blockchain network, affecting many critical aspects of the system:

* The *efficiency and transaction throughput* that can be achieved are much greater than those obtained in public anonymous networks.

* For some consensus algorithms *transaction finality is deterministic* which is a requirement for facilitating many legal transactions in the real-world productive economy.

* The proper governance of the nodes participating in the consensus algorithm can have a critical influence in improving the *level of trust and confidence* in the network.

In the research literature there are several surveys and detailed analyses of the different types of consensus algorithms for blockchain networks and their properties. See for example [3], [1] or even for specialized fields like IoT [2].

In this document we will focus only on the properties of blockchain consensus algorithms which are most suitable for the type of use cases that will be initially implemented in Public-Permissioned networks.

=== Some terminology

In a permissioned transaction ledger, in general only a limited set of nodes participate in the execution of the consensus algorithm. In order to maintain generality and independence from specific blockchain technology, we will use the term _consensus nodes_ to refer to the set of nodes that execute the consensus algorithm. It should be noted that in some implementations the consensus nodes are called _validator nodes_ and in other environments _ordering nodes_.

With this terminology, we can define two main roles of participants in a permissioned blockchain network:

Consensus nodes:: are responsible for the execution of the consensus algorithm

Regular nodes:: perform the maintenance of a local copy of the blockchain using the blocks generated from the set of consensus nodes.

In this discussion, in order to determine the position of a transaction within the transaction ledger we use a pair **(h, i)**, where *h* is the height of the block including the transaction, and *i* is the position of the transaction within the block.

[role="table table-bordered table-hover"]
.This is a fantastic table
|===
|Name of Column 1        |Name of Column 2            |Name of Column 3 

|Cell in column 1, row 1
|Cell in column 2, row 1
|Cell in column 3, row 1

|Cell in column 1, row 2
|Cell in column 2, row 2
|Cell in column 3, row 2
|===

[cols="1,1,2", options="header"] 
.Applications
|===
|Name
|Category
|Description

|Firefox
|Browser
|Mozilla Firefox is an open-source web browser.
It's designed for standards compliance,
performance, portability.

|Arquillian
|Testing
|An innovative and highly extensible testing platform.
Empowers developers to easily create real, automated tests.
|===